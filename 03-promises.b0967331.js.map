{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","onSubmitForm","e","preventDefault","formData","FormData","user","forEach","value","name","resOfAmount","amount","console","log","delay","position","step","currentTarget","reset","Promise","resolve","reject","shouldResolve","Math","random","setInterval","createPromise","then","catch","addEventListener"],"mappings":";AAAA,MAAMA,EAAOC,SAASC,cAAc,SAIpC,SAASC,EAAaC,GACtBA,EAAEC,iBACOC,MAAAA,EAAW,IAAIC,SAASP,GAGxBQ,EAAO,GACbF,EAASG,QAAQ,CAACC,EAAOC,KAErBH,EAAKG,GAAQD,IAIZE,MAAAA,EAAcJ,EAAKK,OACzBC,QAAQC,IAAIH,GAENI,MAAAA,EAAQR,EAAKQ,MACnBF,QAAQC,IAAIC,GAENC,MAAAA,EAAWT,EAAKU,KACtBJ,QAAQC,IAAIE,GAGZb,EAAEe,cAAcC,QAGM,EAACH,EAAUD,IACxB,IAAIK,QAAQ,CAACC,EAASC,KACvBC,MAAAA,EAAgBC,KAAKC,SAAW,GACtCC,YAAY,KACJH,GAENF,EAAQ,CAAEL,SAAAA,EAAUD,MAAAA,IAGpBO,EAAO,CAAEN,SAAAA,EAAUD,MAAAA,KAEf,OAMRY,CAAcZ,EAAOC,GAClBY,KAAK,EAAGZ,SAAAA,EAAUD,MAAAA,MACnBF,QAAQC,2BAA2BE,QAAeD,SAEnDc,MAAM,EAAGb,SAAAA,EAAUD,MAAAA,MAClBF,QAAQC,0BAA0BE,QAAeD,SAhDrDhB,EAAK+B,iBAAiB,SAAU5B","file":"03-promises.b0967331.js","sourceRoot":"../src","sourcesContent":["const form = document.querySelector('.form');\n\n\nform.addEventListener('submit', onSubmitForm);\nfunction onSubmitForm(e) {\ne.preventDefault();\n   const formData = new FormData(form);\n  \n  \n   const user = {};\n   formData.forEach((value, name) => {\n      \n       user[name] = value;\n      \n\n   });\n  const resOfAmount = user.amount;\n  console.log(resOfAmount);\n\n  const delay = user.delay\n  console.log(delay);\n\n  const position = user.step;\n  console.log(position);\n \n  \n  e.currentTarget.reset();\n  \n \n  const createPromise = (position, delay) => {\n    return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setInterval(() => {\n        if (shouldResolve) {\n      // Fulfill \n      resolve({ position, delay });\n    } \n      // Reject\n      reject({ position, delay });\n    \n       }, 2000)\n  });\n  };\n\n\n\n  createPromise(delay, position)\n    .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n};\n\n\n\n// ============================================================================\n\n\n\n// const promise = new Promise((resolve, reject) => {\n//   const resOfRandom = Math.random() > 0.5;\n\n//   setTimeout(() => {\n//     if (resOfRandom) {\n//       resolve('good');\n//     } reject('bad');\n//   },2000)\n//  });\n// // promise.then(onResult, onError);\n// function onResult(result) {\n//   console.log(`${result}`)\n// };\n// // function onError(error) {\n// //   console.log(`${error}`)\n// // }\n// promise\n//   .then(onResult)\n//   .then(x => {\n//     console.log(x);\n//     throw new Error('помилка в другому зен');\n//   }).catch(error => console.log(error))\n//   .finally(() => console.log('fffffffffffff'));"]}