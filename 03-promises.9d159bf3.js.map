{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","onSubmitForm","e","preventDefault","formData","FormData","user","forEach","value","name","resOfAmount","amount","console","log","delay","step","currentTarget","reset","Promise","all","then","x","position","resolve","reject","shouldResolve","Math","random","setInterval","createPromise","catch","addEventListener"],"mappings":";AAAA,MAAMA,EAAOC,SAASC,cAAc,SAIpC,SAASC,EAAaC,GACtBA,EAAEC,iBACOC,MAAAA,EAAW,IAAIC,SAASP,GAExBQ,EAAO,GACbF,EAASG,QAAQ,CAACC,EAAOC,KACrBH,EAAKG,GAAQD,IAGZE,MAAAA,EAAcJ,EAAKK,OACzBC,QAAQC,IAAIH,GAENI,MAAAA,EAAQR,EAAKQ,MACnBF,QAAQC,IAAIC,GAENC,MAAAA,EAAOT,EAAKS,KAClBH,QAAQC,IAAIE,GAGZb,EAAEc,cAAcC,QAEhBC,QAAQC,IAAIT,GAAaU,KAAKC,IAAOT,QAAQC,IAAIQ,KACjDC,SAAW,EAEW,EAACA,EAAUR,IACxB,IAAII,QAAQ,CAACK,EAASC,KACvBC,MAAAA,EAAgBC,KAAKC,SAAW,GACtCC,YAAY,KACJH,GAENF,EAAQ,CAAED,SAAAA,EAAUR,MAAAA,IAGpBU,EAAO,CAAEF,SAAAA,EAAUR,MAAAA,KAEfA,KAMRe,CAAcP,SAAUR,GACrBM,KAAK,EAAGE,SAAAA,EAAUR,MAAAA,MACnBF,QAAQC,2BAA2BS,QAAeR,SAEnDgB,MAAM,EAAGR,SAAAA,EAAUR,MAAAA,MAClBF,QAAQC,0BAA0BS,QAAeR,SA/CrDhB,EAAKiC,iBAAiB,SAAU9B","file":"03-promises.9d159bf3.js","sourceRoot":"../src","sourcesContent":["const form = document.querySelector('.form');\n\n\nform.addEventListener('submit', onSubmitForm);\nfunction onSubmitForm(e) {\ne.preventDefault();\n   const formData = new FormData(form);\n  \n   const user = {};\n   formData.forEach((value, name) => {\n       user[name] = value;\n   });\n  \n  const resOfAmount = user.amount;\n  console.log(resOfAmount);\n \n  const delay = user.delay;\n  console.log(delay);\n\n  const step = user.step;\n  console.log(step);\n \n  \n  e.currentTarget.reset();\n\n  Promise.all(resOfAmount).then(x => { console.log(x)})\n  position = 1;\n \n  const createPromise = (position, delay) => {\n    return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setInterval(() => {\n        if (shouldResolve) {\n      // Fulfill \n      resolve({ position, delay });\n    } \n      // Reject\n      reject({ position, delay });\n    \n       }, delay)\n  });\n  };\n\n\n\n  createPromise(position, delay)\n    .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n};\n\n\n\n// ============================================================================\n\n\n\n// const promise = new Promise((resolve, reject) => {\n//   const resOfRandom = Math.random() > 0.5;\n\n//   setTimeout(() => {\n//     if (resOfRandom) {\n//       resolve('good');\n//     } reject('bad');\n//   },2000)\n//  });\n// // promise.then(onResult, onError);\n// function onResult(result) {\n//   console.log(`${result}`)\n// };\n// // function onError(error) {\n// //   console.log(`${error}`)\n// // }\n// promise\n//   .then(onResult)\n//   .then(x => {\n//     console.log(x);\n//     throw new Error('помилка в другому зен');\n//   }).catch(error => console.log(error))\n//   .finally(() => console.log('fffffffffffff'));"]}